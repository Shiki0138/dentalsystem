#!/bin/bash

# ==================================================
# Railway本格デプロイメント自動化スクリプト
# Generated by Quartet Automation System
# ==================================================

PROJECT_NAME=${1:-dentalsystem}
DEPLOY_ENV=${2:-production}
RAILWAY_SERVICE=${3:-dental-system}

# カラー設定
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
PURPLE='\033[0;35m'
NC='\033[0m'

echo -e "${PURPLE}===================================================${NC}"
echo -e "${PURPLE}    Railway本格デプロイメント自動化システム${NC}"
echo -e "${PURPLE}===================================================${NC}"

LOG_FILE="logs/railway-deploy-$(date '+%Y%m%d_%H%M%S').log"
mkdir -p logs

echo "[$(date '+%Y-%m-%d %H:%M:%S')] Railway デプロイ開始" >> $LOG_FILE

# Phase 1: 事前チェック
pre_deployment_check() {
    echo -e "\n${BLUE}=== Phase 1: 事前デプロイチェック ===${NC}"
    
    echo -e "${CYAN}Git状況確認中...${NC}"
    if [ $(git status --porcelain | wc -l) -ne 0 ]; then
        echo -e "${RED}❌ 未コミットファイルが存在します${NC}"
        git status --short
        echo -e "${YELLOW}先にコミットしてください${NC}"
        return 1
    fi
    
    echo -e "${CYAN}Branch確認中...${NC}"
    CURRENT_BRANCH=$(git branch --show-current)
    if [ "$CURRENT_BRANCH" != "main" ] && [ "$CURRENT_BRANCH" != "master" ]; then
        echo -e "${YELLOW}⚠️ 現在のブランチ: $CURRENT_BRANCH${NC}"
        echo -e "${YELLOW}mainブランチでのデプロイを推奨します${NC}"
    fi
    
    echo -e "${CYAN}依存関係確認中...${NC}"
    if [ -f "Gemfile.lock" ]; then
        echo -e "${GREEN}✅ Gemfile.lock 存在${NC}"
    else
        echo -e "${RED}❌ Gemfile.lock が見つかりません${NC}"
        return 1
    fi
    
    echo -e "${CYAN}必須ファイル確認中...${NC}"
    REQUIRED_FILES=("config/database.yml" "config/application.rb" "Gemfile")
    for file in "${REQUIRED_FILES[@]}"; do
        if [ -f "$file" ]; then
            echo -e "${GREEN}✅ $file${NC}"
        else
            echo -e "${RED}❌ $file が見つかりません${NC}"
            return 1
        fi
    done
    
    echo -e "${GREEN}✅ 事前チェック完了${NC}"
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] 事前チェック完了" >> $LOG_FILE
}

# Phase 2: Railway環境設定
setup_railway_environment() {
    echo -e "\n${BLUE}=== Phase 2: Railway環境設定 ===${NC}"
    
    # Railway CLI確認
    if ! command -v railway &> /dev/null; then
        echo -e "${YELLOW}Railway CLI インストール中...${NC}"
        curl -fsSL https://railway.app/install.sh | sh
        export PATH="$HOME/.railway/bin:$PATH"
    fi
    
    echo -e "${CYAN}Railway プロジェクト初期化中...${NC}"
    
    # Railwayfile作成
    cat > railway.toml << 'EOF'
[build]
builder = "NIXPACKS"
buildCommand = "bundle install && bundle exec rails assets:precompile"

[deploy]
startCommand = "bundle exec rails server -p $PORT -e $RAILS_ENV"
restartPolicyType = "ON_FAILURE"
restartPolicyMaxRetries = 10

[env]
RAILS_ENV = "production"
RAILS_SERVE_STATIC_FILES = "true"
RAILS_LOG_TO_STDOUT = "true"
EOF
    
    echo -e "${GREEN}✅ Railway設定ファイル生成${NC}"
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] Railway設定完了" >> $LOG_FILE
}

# Phase 3: 本番用設定ファイル生成
generate_production_configs() {
    echo -e "\n${BLUE}=== Phase 3: 本番用設定ファイル生成 ===${NC}"
    
    # Procfile作成
    echo -e "${CYAN}Procfile生成中...${NC}"
    cat > Procfile << 'EOF'
web: bundle exec rails server -p $PORT -e $RAILS_ENV
worker: bundle exec sidekiq -e $RAILS_ENV
EOF
    
    # Dockerfile作成（バックアップ用）
    echo -e "${CYAN}Dockerfile生成中...${NC}"
    cat > Dockerfile << 'EOF'
FROM ruby:3.3.8-slim

# 必要なパッケージをインストール
RUN apt-get update -qq && apt-get install -y \
    build-essential \
    libpq-dev \
    nodejs \
    npm \
    git \
    curl \
    && rm -rf /var/lib/apt/lists/*

# アプリケーションディレクトリ作成
WORKDIR /app

# Gemfile関連をコピーして依存関係インストール
COPY Gemfile Gemfile.lock ./
RUN bundle config set --local deployment 'true' && \
    bundle config set --local without 'development test' && \
    bundle install

# アプリケーションコードをコピー
COPY . .

# アセットプリコンパイル
RUN bundle exec rails assets:precompile

# ポート公開
EXPOSE 3000

# 実行コマンド
CMD ["bundle", "exec", "rails", "server", "-b", "0.0.0.0", "-p", "3000"]
EOF
    
    # .dockerignore作成
    cat > .dockerignore << 'EOF'
.git
.gitignore
README.md
Dockerfile
.dockerignore
node_modules
tmp
log
coverage
.env*
EOF
    
    # nixpacks.toml作成（Railway最適化）
    cat > nixpacks.toml << 'EOF'
[phases.build]
cmds = [
    "bundle install",
    "bundle exec rails assets:precompile"
]

[variables]
RAILS_ENV = "production"
RAILS_SERVE_STATIC_FILES = "true"
RAILS_LOG_TO_STDOUT = "true"
EOF
    
    echo -e "${GREEN}✅ 本番用設定ファイル生成完了${NC}"
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] 本番設定完了" >> $LOG_FILE
}

# Phase 4: データベース・環境変数設定
setup_database_and_env() {
    echo -e "\n${BLUE}=== Phase 4: データベース・環境変数設定 ===${NC}"
    
    echo -e "${CYAN}本番用環境変数テンプレート生成中...${NC}"
    
    cat > .env.production.template << 'EOF'
# ===== Railway Production Environment Variables =====

# Rails Configuration
RAILS_ENV=production
RAILS_SERVE_STATIC_FILES=true
RAILS_LOG_TO_STDOUT=true

# Security Keys (要生成)
RAILS_MASTER_KEY=your_master_key_here
SECRET_KEY_BASE=your_secret_key_base_here

# Database (Railway PostgreSQL Plugin自動設定)
DATABASE_URL=${{PostgreSQL.DATABASE_URL}}
POSTGRES_DB=${{PostgreSQL.POSTGRES_DB}}
POSTGRES_USER=${{PostgreSQL.POSTGRES_USER}}
POSTGRES_PASSWORD=${{PostgreSQL.POSTGRES_PASSWORD}}
POSTGRES_HOST=${{PostgreSQL.POSTGRES_HOST}}
POSTGRES_PORT=${{PostgreSQL.POSTGRES_PORT}}

# Cache & Jobs (Railway Redis Plugin自動設定)
REDIS_URL=${{Redis.REDIS_URL}}
REDIS_HOST=${{Redis.REDIS_HOST}}
REDIS_PORT=${{Redis.REDIS_PORT}}
REDIS_PASSWORD=${{Redis.REDIS_PASSWORD}}

# LINE Messaging API
LINE_CHANNEL_SECRET=your_line_channel_secret
LINE_CHANNEL_ACCESS_TOKEN=your_line_channel_access_token

# Google APIs
GOOGLE_APPLICATION_CREDENTIALS_JSON=your_google_credentials_json
GOOGLE_CALENDAR_ID=your_google_calendar_id

# Email Configuration
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USERNAME=your_email@gmail.com
SMTP_PASSWORD=your_app_password
SMTP_DOMAIN=gmail.com

# Application Settings
DENTAL_CLINIC_NAME=Your Dental Clinic
DENTAL_CLINIC_PHONE=03-1234-5678
DENTAL_CLINIC_ADDRESS=Tokyo, Japan

# Security Settings  
ALLOWED_HOSTS=your-app.railway.app
CORS_ALLOWED_ORIGINS=https://your-app.railway.app

# Monitoring & Logging
RAILS_LOG_LEVEL=info
SENTRY_DSN=your_sentry_dsn_if_using

# Performance Settings
WEB_CONCURRENCY=2
RAILS_MAX_THREADS=5
EOF
    
    # 秘密鍵生成スクリプト作成
    cat > scripts/generate-production-keys.sh << 'EOF'
#!/bin/bash

echo "=== Rails Production Keys Generator ==="

echo "Generating SECRET_KEY_BASE..."
SECRET_KEY_BASE=$(rails secret)
echo "SECRET_KEY_BASE=$SECRET_KEY_BASE"

echo ""
echo "Generating RAILS_MASTER_KEY..."
echo "Run: EDITOR=nano rails credentials:edit --environment production"
echo "This will generate config/credentials/production.key"

echo ""
echo "=== Copy these values to Railway Environment Variables ==="
echo "SECRET_KEY_BASE=$SECRET_KEY_BASE"
EOF
    
    chmod +x scripts/generate-production-keys.sh
    
    echo -e "${GREEN}✅ データベース・環境変数設定完了${NC}"
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] DB・環境変数設定完了" >> $LOG_FILE
}

# Phase 5: GitHub Actions CI/CD設定
setup_github_actions() {
    echo -e "\n${BLUE}=== Phase 5: GitHub Actions CI/CD設定 ===${NC}"
    
    mkdir -p .github/workflows
    
    cat > .github/workflows/railway-deploy.yml << 'EOF'
name: Deploy to Railway

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: dental_system_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 3.3.8
        bundler-cache: true
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install dependencies
      run: |
        bundle install
        
    - name: Setup Database
      run: |
        bundle exec rails db:create RAILS_ENV=test
        bundle exec rails db:migrate RAILS_ENV=test
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/dental_system_test
        REDIS_URL: redis://localhost:6379/0
        RAILS_ENV: test
        
    - name: Precompile assets
      run: bundle exec rails assets:precompile
      env:
        RAILS_ENV: test
        SECRET_KEY_BASE: test_secret_key_base
        
    - name: Run RSpec tests
      run: bundle exec rspec
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/dental_system_test
        REDIS_URL: redis://localhost:6379/0
        RAILS_ENV: test
        SECRET_KEY_BASE: test_secret_key_base
        
    - name: Run RuboCop
      run: bundle exec rubocop --parallel
      
    - name: Security Audit
      run: |
        gem install bundler-audit
        bundler-audit --update
        bundle exec bundle-audit check

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Railway
      uses: bervProject/railway-deploy@v1.8.0
      with:
        railway_token: ${{ secrets.RAILWAY_TOKEN }}
        service: ${{ secrets.RAILWAY_SERVICE_ID }}
        
    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "🚀 Deployment successful!"
        else
          echo "❌ Deployment failed!"
        fi
EOF
    
    echo -e "${GREEN}✅ GitHub Actions CI/CD設定完了${NC}"
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] CI/CD設定完了" >> $LOG_FILE
}

# Phase 6: 健康チェック・監視設定
setup_monitoring() {
    echo -e "\n${BLUE}=== Phase 6: 監視・ヘルスチェック設定 ===${NC}"
    
    # Health check controller作成
    mkdir -p app/controllers/api/v1
    cat > app/controllers/api/v1/health_controller.rb << 'EOF'
class Api::V1::HealthController < ApplicationController
  skip_before_action :authenticate_user!, only: [:show]
  
  def show
    status = {
      status: 'healthy',
      timestamp: Time.current.iso8601,
      version: Rails.application.config.version || '1.0.0',
      environment: Rails.env,
      database: database_status,
      redis: redis_status,
      services: service_status
    }
    
    render json: status, status: :ok
  rescue => e
    render json: { 
      status: 'unhealthy', 
      error: e.message,
      timestamp: Time.current.iso8601 
    }, status: :service_unavailable
  end
  
  private
  
  def database_status
    ActiveRecord::Base.connection.execute('SELECT 1')
    'connected'
  rescue => e
    "error: #{e.message}"
  end
  
  def redis_status
    Redis.current.ping
    'connected'
  rescue => e
    "error: #{e.message}"
  end
  
  def service_status
    {
      sidekiq: sidekiq_status,
      disk_space: disk_usage,
      memory: memory_usage
    }
  end
  
  def sidekiq_status
    Sidekiq::Stats.new.processed > 0 ? 'active' : 'idle'
  rescue
    'unavailable'
  end
  
  def disk_usage
    `df -h /`.lines.last.split[4] rescue 'unknown'
  end
  
  def memory_usage
    `free -m | grep '^Mem:' | awk '{print $3"/"$2"MB"}'`.strip rescue 'unknown'
  end
end
EOF
    
    # ルート追加
    echo -e "${CYAN}Health check route追加中...${NC}"
    if ! grep -q "api/v1/health" config/routes.rb; then
        sed -i '' '/Rails.application.routes.draw do/a\
  namespace :api do\
    namespace :v1 do\
      get "health", to: "health#show"\
    end\
  end\
' config/routes.rb
    fi
    
    echo -e "${GREEN}✅ 監視・ヘルスチェック設定完了${NC}"
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] 監視設定完了" >> $LOG_FILE
}

# Phase 7: 最終デプロイ実行
execute_deployment() {
    echo -e "\n${BLUE}=== Phase 7: 最終デプロイ実行 ===${NC}"
    
    echo -e "${CYAN}デプロイ前最終チェック...${NC}"
    
    # Git変更をコミット
    git add -A
    git commit -m "feat: Railway本格デプロイ設定完了

- Railway環境設定 (railway.toml, Procfile, Dockerfile)
- 本番用環境変数テンプレート作成
- GitHub Actions CI/CD パイプライン設定
- Health check API エンドポイント追加
- 監視・ログ設定最適化

🚀 Railway Deploy Ready

Co-Authored-By: Quartet Automation System
Co-Authored-By: PRESIDENT <president@quartet.ai>
Co-Authored-By: Claude-Code <claude@quartet.ai>
Co-Authored-By: Gemini-CLI <gemini@quartet.ai>
Co-Authored-By: Codex-CLI <codex@quartet.ai>"
    
    echo -e "${CYAN}GitHubにプッシュ中...${NC}"
    git push origin $(git branch --show-current)
    
    echo -e "\n${GREEN}🎉 Railway デプロイ設定完了！${NC}"
    echo -e "${YELLOW}次のステップ:${NC}"
    echo -e "1. Railway (https://railway.app) でアカウント作成"
    echo -e "2. GitHub連携でプロジェクト作成"
    echo -e "3. PostgreSQL Plugin追加"
    echo -e "4. Redis Plugin追加"
    echo -e "5. Environment Variables設定"
    echo -e "6. ./scripts/generate-production-keys.sh 実行"
    echo -e "7. 自動デプロイ開始"
    
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] Railway デプロイ設定完了" >> $LOG_FILE
}

# メイン実行
main() {
    echo -e "${PURPLE}Railway本格デプロイメント自動化を開始します${NC}"
    echo -e "${CYAN}対象: https://github.com/Shiki0138/dentalsystem.git${NC}"
    
    pre_deployment_check || exit 1
    setup_railway_environment
    generate_production_configs
    setup_database_and_env
    setup_github_actions
    setup_monitoring
    execute_deployment
    
    echo -e "\n${PURPLE}===================================================${NC}"
    echo -e "${PURPLE}    Railway本格デプロイメント完了${NC}"
    echo -e "${PURPLE}===================================================${NC}"
    echo -e "${GREEN}📋 デプロイログ: $LOG_FILE${NC}"
    echo -e "${GREEN}📊 分析レポート: deployment/optimal-deployment-analysis.md${NC}"
    echo -e "${CYAN}🚀 Railway Console: https://railway.app/dashboard${NC}"
}

# 実行
main "$@"