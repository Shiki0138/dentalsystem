<%# Turbo Stream用通知部分テンプレート %>
<%# リアルタイム通知・フィードバック表示 %>

<div id="notification_<%= SecureRandom.hex(4) %>" 
     class="notification notification-<%= type %> fixed top-4 right-4 transform transition-all duration-300 ease-in-out translate-x-full z-50"
     data-auto-dismiss="true"
     data-dismiss-delay="5000">
  
  <div class="notification-content <%= notification_classes(type) %> rounded-lg shadow-lg px-6 py-3 flex items-center space-x-3 max-w-md">
    <!-- アイコン -->
    <div class="notification-icon flex-shrink-0">
      <%= notification_icon_svg(type) %>
    </div>
    
    <!-- メッセージ -->
    <div class="notification-message flex-1">
      <p class="text-sm font-medium text-white">
        <%= message %>
      </p>
      
      <% if defined?(details) && details.present? %>
        <p class="text-xs text-gray-200 mt-1">
          <%= details %>
        </p>
      <% end %>
    </div>
    
    <!-- 閉じるボタン -->
    <button type="button" 
            class="notification-close flex-shrink-0 text-white hover:text-gray-200 focus:outline-none"
            onclick="this.closest('.notification').remove()">
      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
      </svg>
    </button>
  </div>
</div>

<!-- JavaScript自動表示・削除 -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    const notification = document.getElementById('<%= "notification_#{SecureRandom.hex(4)}" %>');
    if (notification) {
      // アニメーション表示
      requestAnimationFrame(() => {
        notification.style.transform = 'translateX(0)';
      });
      
      // 自動削除
      if (notification.dataset.autoDismiss === 'true') {
        const delay = parseInt(notification.dataset.dismissDelay) || 5000;
        setTimeout(() => {
          notification.style.transform = 'translateX(100%)';
          setTimeout(() => {
            if (notification.parentNode) {
              notification.remove();
            }
          }, 300);
        }, delay);
      }
    }
  });
</script>

<%# ヘルパーメソッドの定義 %>
<%
  def notification_classes(type)
    base_classes = "text-white"
    
    case type.to_s
    when 'success'
      "#{base_classes} bg-green-500"
    when 'error', 'danger'
      "#{base_classes} bg-red-500"
    when 'warning'
      "#{base_classes} bg-yellow-500"
    when 'info'
      "#{base_classes} bg-blue-500"
    else
      "#{base_classes} bg-gray-500"
    end
  end

  def notification_icon_svg(type)
    case type.to_s
    when 'success'
      '<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
         <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
       </svg>'.html_safe
    when 'error', 'danger'
      '<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
         <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
       </svg>'.html_safe
    when 'warning'
      '<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
         <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
       </svg>'.html_safe
    when 'info'
      '<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
         <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
       </svg>'.html_safe
    else
      '<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
         <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-5 5v-5z"></path>
       </svg>'.html_safe
    end
  end
%>