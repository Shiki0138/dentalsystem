name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  RUBY_VERSION: 3.3.8
  NODE_VERSION: 18

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: dentalsystem_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          bundle install
          npm install

      - name: Setup test database
        env:
          RAILS_ENV: test
          DATABASE_URL: postgres://postgres:password@localhost:5432/dentalsystem_test
          REDIS_URL: redis://localhost:6379/0
        run: |
          bundle exec rails db:create
          bundle exec rails db:migrate

      - name: Run security audit
        run: |
          bundle exec brakeman --no-pager --format json --output /tmp/brakeman.json || true
          if [ -f /tmp/brakeman.json ]; then
            cat /tmp/brakeman.json
          fi

      - name: Run tests
        env:
          RAILS_ENV: test
          DATABASE_URL: postgres://postgres:password@localhost:5432/dentalsystem_test
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY_BASE: test_key_for_ci_only
        run: |
          bundle exec rspec --format documentation --format RspecJunitFormatter --out tmp/rspec.xml

      - name: Run deployment checks
        env:
          RAILS_ENV: production
          SECRET_KEY_BASE: ${{ secrets.SECRET_KEY_BASE }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          REDIS_URL: ${{ secrets.REDIS_URL }}
        run: |
          ruby bin/deploy_check.rb

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            tmp/rspec.xml
            coverage/
            deployment/

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: ${{ secrets.PRODUCTION_URL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: Build production assets
        env:
          RAILS_ENV: production
          SECRET_KEY_BASE: ${{ secrets.SECRET_KEY_BASE }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          bundle exec rails assets:precompile

      - name: Deploy to AWS Lightsail
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          LIGHTSAIL_INSTANCE_NAME: ${{ secrets.LIGHTSAIL_INSTANCE_NAME }}
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
        run: |
          # Install AWS CLI
          pip install awscli
          
          # Configure AWS CLI
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set default.region $AWS_REGION
          
          # Deploy using custom script
          chmod +x scripts/deploy.sh
          ./scripts/deploy.sh

      - name: Run post-deployment health checks
        env:
          PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}
          HEALTH_CHECK_TOKEN: ${{ secrets.HEALTH_CHECK_TOKEN }}
        run: |
          # Wait for deployment to complete
          sleep 30
          
          # Run health checks
          curl -f "$PRODUCTION_URL/health" \
            -H "Authorization: Bearer $HEALTH_CHECK_TOKEN" \
            || exit 1
          
          # Check error rates
          curl -f "$PRODUCTION_URL/admin/health/errors" \
            -H "Authorization: Bearer $HEALTH_CHECK_TOKEN" \
            || exit 1

      - name: Notify deployment status
        if: always()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_REF: ${{ github.ref }}
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            STATUS="‚úÖ SUCCESS"
            COLOR="good"
          else
            STATUS="‚ùå FAILED"
            COLOR="danger"
          fi
          
          curl -X POST -H 'Content-type: application/json' \
            --data "{
              \"attachments\": [{
                \"color\": \"$COLOR\",
                \"title\": \"Dental System Deployment\",
                \"text\": \"$STATUS: Deployment of commit ${GITHUB_SHA:0:7} to production\",
                \"fields\": [
                  {\"title\": \"Branch\", \"value\": \"$GITHUB_REF\", \"short\": true},
                  {\"title\": \"Commit\", \"value\": \"${GITHUB_SHA:0:7}\", \"short\": true}
                ]
              }]
            }" \
            $SLACK_WEBHOOK

  rollback:
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: deploy
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Rollback deployment
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          LIGHTSAIL_INSTANCE_NAME: ${{ secrets.LIGHTSAIL_INSTANCE_NAME }}
        run: |
          pip install awscli
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set default.region $AWS_REGION
          
          # Execute rollback script
          chmod +x scripts/rollback.sh
          ./scripts/rollback.sh

      - name: Notify rollback
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{
              "attachments": [{
                "color": "warning",
                "title": "Dental System Rollback",
                "text": "üîÑ Automatic rollback executed due to deployment failure"
              }]
            }' \
            $SLACK_WEBHOOK